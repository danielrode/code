#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Daniel Rode
# Name: File History Git
# Tags: file management, backup, history
# Dependencies:
#   btrfs
#   lf
# Created: 22 Sep 2025
# Updated: -


# Description: Given some file path, assuming the file is included in some
# BTRFS snapshot(s), create a read-only cache of all committed revisions of
# said file as a temporary filesystem directory and open that directory in
# a file manager (lf).


import sys
import subprocess as sp
from pathlib import Path
from tempfile import TemporaryDirectory


# Constants
EXE_NAME = Path(sys.argv[0]).name  # This script's filename
HELP_TEXT = f"Usage: {EXE_NAME} FILE_PATH"


# Functions
def print2(*args, **kwargs) -> None:
    print(*args, **kwargs, file=sys.stderr)


def get_btrfs_subvol(path: Path) -> Path:
    """Return the BTRFS subvolume hosting the given path"""

    cmd = ['stat', '--format=%m']
    p = sp.run(cmd + [str(path)], check=True, capture_output=True, text=True)

    return Path(p.stdout.strip())


# Process command line arguments
try:
    file_path = Path(sys.argv[1])
except IndexError:
    print2(HELP_TEXT)
    sys.exit(1)

for p in (file_path,):
    if not p.exists():
        print2("error: File not found:", p)
        sys.exit(1)

# Determine snapshot directory from given path
subvol_path = get_btrfs_subvol(file_path)
snapshots_dir = subvol_path / '.snapshots'
print(snapshots_dir)
if not snapshots_dir.exists():
    print2("error: No BTRFS snapshots directory found")
    sys.exit(2)

# Create temp directory with links to old snapshot versions
with TemporaryDirectory() as tmpdir:
    tmpdir = Path(tmpdir)
    for snapshot in snapshots_dir.glob("@*"):
        file_snapshot_path = snapshot / (
            str(file_path)
            .removeprefix(str(subvol_path))
            .lstrip('/')
        )
        if not file_snapshot_path.exists():
            continue

        cmd = [
            'ln', '-s',
            str(file_snapshot_path),
            str(tmpdir / snapshot.name.removeprefix("@snapshot-")),
        ]
        sp.run(cmd)

    # Open file manager to temp directory where the cached file versions are
    sp.run(['lf', tmpdir], check=True)
